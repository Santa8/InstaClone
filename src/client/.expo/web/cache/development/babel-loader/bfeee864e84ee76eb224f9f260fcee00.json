{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport axios from \"axios\";\nimport { baseURL } from \"../constants\";\nimport AsyncStorage from \"@react-native-community/async-storage\";\nexport var UPLOAD_REQUEST = \"UPLOAD_REQUEST\";\nexport var UPLOAD_SUCCESS = \"UPLOAD_SUCCESS\";\nexport var UPLOAD_FAILURE = \"UPLOAD_FAILURE\";\nexport var EDIT_POST = \"EDIT_POST\";\nexport var MODIFY_POST = \"MODIFY_POST\";\nexport var DISPLAY_LIKES = \"DISPLAY_LIKES\";\nexport var uploadRequest = function uploadRequest() {\n  return {\n    type: UPLOAD_REQUEST\n  };\n};\nexport var editPost = function editPost(postdata) {\n  return {\n    type: EDIT_POST,\n    payload: postdata\n  };\n};\nexport var modifyPost = function modifyPost(postdata) {\n  return {\n    type: MODIFY_POST,\n    payload: postdata\n  };\n};\nexport var uploadSuccess = function uploadSuccess(signupData) {\n  return {\n    type: UPLOAD_SUCCESS,\n    payload: signupData\n  };\n};\nexport var uploadFailure = function uploadFailure(errMsg) {\n  return {\n    type: UPLOAD_FAILURE,\n    payload: errMsg\n  };\n};\nexport var displayLikes = function displayLikes(data) {\n  return {\n    type: DISPLAY_LIKES,\n    payload: data\n  };\n};\nexport var uploadprofilephoto = function uploadprofilephoto(Data) {\n  return function _callee(dispatch) {\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            dispatch(uploadRequest());\n            _context.t0 = axios;\n            _context.t1 = baseURL;\n            _context.t2 = {\n              id: Data.userid,\n              url: Data.urlpost\n            };\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem(\"token\"));\n\n          case 6:\n            _context.t3 = _context.sent;\n            _context.t4 = {\n              \"auth-token\": _context.t3\n            };\n            _context.t5 = {\n              method: \"post\",\n              url: \"/uploadprofilephoto\",\n              baseURL: _context.t1,\n              data: _context.t2,\n              headers: _context.t4\n            };\n            (0, _context.t0)(_context.t5).then(function (res) {\n              var message = res.data.message;\n\n              if (message === \"POST UPLOADED\") {\n                dispatch(uploadSuccess(Data));\n              } else {\n                dispatch(uploadFailure(message));\n              }\n            }).catch(function (err) {\n              console.log(\"postsActions.js, upload Request Error: \", err.message);\n              dispatch(uploadFailure(\"Fail to Upload\"));\n            });\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var editpost = function editpost(postdata) {\n  return function (dispatch) {\n    dispatch(editPost(postdata));\n  };\n};\nexport var displaylikes = function displaylikes(ddata) {\n  return function _callee2(dispatch) {\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.t0 = axios;\n            _context2.t1 = baseURL;\n            _context2.t2 = {\n              postid: ddata.postid\n            };\n            _context2.next = 5;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem(\"token\"));\n\n          case 5:\n            _context2.t3 = _context2.sent;\n            _context2.t4 = {\n              \"auth-token\": _context2.t3\n            };\n            _context2.t5 = {\n              method: \"post\",\n              url: \"/getlikesname\",\n              baseURL: _context2.t1,\n              data: _context2.t2,\n              headers: _context2.t4\n            };\n            (0, _context2.t0)(_context2.t5).then(function (res) {\n              var likes = res.data.likes;\n\n              if (res.data.value) {\n                dispatch(displayLikes(likes));\n              }\n            }).catch(function (err) {\n              return console.log(err);\n            });\n\n          case 9:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var modifypost = function modifypost(postdata) {\n  var postdataa = postdata;\n  return function _callee3(dispatch) {\n    return _regeneratorRuntime.async(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            dispatch(modifyPost(postdataa));\n            _context3.t0 = axios;\n            _context3.t1 = baseURL;\n            _context3.t2 = {\n              userid: postdataa.userid,\n              postid: postdataa.postid,\n              description: postdataa.description\n            };\n            _context3.next = 6;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem(\"token\"));\n\n          case 6:\n            _context3.t3 = _context3.sent;\n            _context3.t4 = {\n              \"auth-token\": _context3.t3\n            };\n            _context3.t5 = {\n              method: \"post\",\n              url: \"/UpdatePost\",\n              baseURL: _context3.t1,\n              data: _context3.t2,\n              headers: _context3.t4\n            };\n            (0, _context3.t0)(_context3.t5).then(function (res) {\n              var message = res.data.message;\n\n              if (res.data.value) {}\n            }).catch(function (err) {\n              return console.log(err);\n            });\n\n          case 10:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};","map":{"version":3,"sources":["/home/sanata/Desktop/InpGram/InstaClone/src/client/actions/postsActions.js"],"names":["axios","baseURL","AsyncStorage","UPLOAD_REQUEST","UPLOAD_SUCCESS","UPLOAD_FAILURE","EDIT_POST","MODIFY_POST","DISPLAY_LIKES","uploadRequest","type","editPost","postdata","payload","modifyPost","uploadSuccess","signupData","uploadFailure","errMsg","displayLikes","data","uploadprofilephoto","Data","dispatch","id","userid","url","urlpost","getItem","method","headers","then","res","message","catch","err","console","log","editpost","displaylikes","ddata","postid","likes","value","modifypost","postdataa","description"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport { baseURL } from \"../constants\";\nimport AsyncStorage from \"@react-native-community/async-storage\";\n\n// action types\nexport const UPLOAD_REQUEST = \"UPLOAD_REQUEST\";\nexport const UPLOAD_SUCCESS = \"UPLOAD_SUCCESS\";\nexport const UPLOAD_FAILURE = \"UPLOAD_FAILURE\";\nexport const EDIT_POST = \"EDIT_POST\";\nexport const MODIFY_POST = \"MODIFY_POST\";\nexport const DISPLAY_LIKES = \"DISPLAY_LIKES\";\n// action creators\nexport const uploadRequest = () => {\n  return {\n    type: UPLOAD_REQUEST,\n  };\n};\nexport const editPost = (postdata) => {\n  return {\n    type: EDIT_POST,\n    payload: postdata,\n  };\n};\nexport const modifyPost = (postdata) => {\n  return {\n    type: MODIFY_POST,\n    payload: postdata,\n  };\n};\nexport const uploadSuccess = (signupData) => {\n  return {\n    type: UPLOAD_SUCCESS,\n    payload: signupData,\n  };\n};\nexport const uploadFailure = (errMsg) => {\n  return {\n    type: UPLOAD_FAILURE,\n    payload: errMsg,\n  };\n};\nexport const displayLikes = (data) => {\n  return {\n    type: DISPLAY_LIKES,\n    payload: data,\n  };\n};\n\n// async impure action creator enabled by redux-thunk\nexport const uploadprofilephoto = (Data) => {\n  return async (dispatch) => {\n    dispatch(uploadRequest());\n    //const signupUri = 'http://localhost:3000/register';\n    axios({\n      method: \"post\",\n      url: \"/uploadprofilephoto\",\n      baseURL: baseURL,\n      data: {\n        id: Data.userid,\n        url: Data.urlpost,\n      },\n      headers: {\n        \"auth-token\": await AsyncStorage.getItem(\"token\"),\n      },\n    })\n      .then((res) => {\n        const message = res.data.message;\n        if (message === \"POST UPLOADED\") {\n          dispatch(uploadSuccess(Data));\n        } else {\n          dispatch(uploadFailure(message));\n        }\n      })\n      .catch((err) => {\n        console.log(\"postsActions.js, upload Request Error: \", err.message);\n        dispatch(uploadFailure(\"Fail to Upload\"));\n      });\n  };\n};\n\nexport const editpost = (postdata) => {\n  return (dispatch) => {\n    dispatch(editPost(postdata));\n  };\n};\nexport const displaylikes = (ddata) => {\n  return async (dispatch) => {\n    axios({\n      method: \"post\",\n      url: \"/getlikesname\",\n      baseURL: baseURL,\n      data: {\n        postid: ddata.postid,\n      },\n      headers: {\n        \"auth-token\": await AsyncStorage.getItem(\"token\"),\n      },\n    })\n      .then((res) => {\n        const likes = res.data.likes;\n\n        if (res.data.value) {\n          dispatch(displayLikes(likes));\n        }\n      })\n      .catch((err) => console.log(err));\n  };\n};\n\nexport const modifypost = (postdata) => {\n  const postdataa = postdata;\n  return async (dispatch) => {\n    dispatch(modifyPost(postdataa));\n    axios({\n      method: \"post\",\n      url: \"/UpdatePost\",\n      baseURL: baseURL,\n      data: {\n        userid: postdataa.userid,\n        postid: postdataa.postid,\n        description: postdataa.description,\n      },\n      headers: {\n        \"auth-token\": await AsyncStorage.getItem(\"token\"),\n      },\n    })\n      .then((res) => {\n        const message = res.data.message;\n\n        if (res.data.value) {\n        }\n      })\n      .catch((err) => console.log(err));\n  };\n};\n"]},"metadata":{},"sourceType":"module"}